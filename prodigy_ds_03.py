# -*- coding: utf-8 -*-
"""PRODIGY_DS_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13uo1LqEM3xcsMOTywAG9yYtbi1kbqLxI
"""

#Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
from sklearn.preprocessing import LabelEncoder

#Read and load data:
df=pd.read_csv('/content/drive/MyDrive/Prodigy_Internship/bank-full.csv', delimiter=';')

df.head()

#Check missing values:
print(df.isnull().sum())

df.info()

#Summary Statistics:
df.describe()

#Encode the target variable y:
label_encoder = LabelEncoder()
df['y'] = label_encoder.fit_transform(df['y'])

#Encode categorical variables:
categorical_columns = df.select_dtypes(include=['object']).columns
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

#Model building
X = df.drop('y', axis=1)
y = df['y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Initialize and train the Decision Tree Classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Confusion matrix:
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

#Classification report
cr = classification_report(y_test, y_pred)
print("Classification Report:")
print(cr)

